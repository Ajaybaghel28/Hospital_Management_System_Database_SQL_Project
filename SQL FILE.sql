CREATE TABLE patients (
patient_id INT PRIMARY KEY,
name VARCHAR(50),
dob DATE,
gender VARCHAR(20),
address TEXT,
phone_number INT
);

CREATE TABLE doctors (
doctor_id INT PRIMARY KEY,
name VARCHAR(50),
specialization VARCHAR(50),
contact_info INT
);


CREATE TABLE appointments (
appointment_id INT PRIMARY KEY,
patient_id INT,
doctor_id INT,
appointment_date DATE,
status VARCHAR(25),
FOREIGN KEY (patient_id) REFERENCES patients(patient_id),
FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id)
);

CREATE TABLE billing(
bill_id INT PRIMARY KEY,
patient_id INT,
doctor_id INT,
service_date DATE,
service_type VARCHAR(25),
amount_charged FLOAT,
payment_status VARCHAR(25),
FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id),
FOREIGN KEY (patient_id) REFERENCES patients(patient_id)
);


CREATE TABLE medical_records(
record_id INT PRIMARY KEY,
patient_id INT,
doctor_id INT,
diagnosis VARCHAR(30),
treatment_plan TEXT,
medications_prescribed TEXT,
record_date DATE,
FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id),
FOREIGN KEY (patient_id) REFERENCES patients(patient_id)
);


ALTER TABLE patients ALTER COLUMN phone_number TYPE VARCHAR(20);
ALTER TABLE doctors ALTER COLUMN contact_info TYPE VARCHAR(20);


-- EDA

SELECT * FROM patients
SELECT * FROM doctors
SELECT * FROM appointments
SELECT * FROM billing
SELECT * FROM medical_records

SELECT DISTINCT COUNT(bill_id) FROM billing;
SELECT DISTINCT COUNT(patient_id) FROM appointments;

-- Basic Level

-- Q1. Retrieve all patient details.
SELECT * FROM patients

-- Q2. List all appointments for a specific doctor.
SELECT * FROM appointments
WHERE doctor_id = 8;    -- Replace 8 with the desired doctor_id
    
-- Q3. Show the billing details for a specific patient
SELECT * FROM billing
WHERE patient_id = 54;  -- Replace 54 with the desired patient_id

-- Q4. Find all patients of a specific gender.
SELECT * FROM patients
WHERE gender = 'Female'

-- Q5. Display the names and contact information of all doctors.
SELECT name, contact_info FROM doctors

-- Intermediate Level

-- Q6. Find all patients who havenâ€™t paid their bills.
SELECT b.patient_id, p.name, b.payment_status FROM billing b
INNER JOIN patients p 
ON p.patient_id = b.patient_id
WHERE payment_status = 'Unpaid';

-- Q7. What is the count of appointments for each doctor, categorized by appointment status?
SELECT doctor_id, status, COUNT(status) AS no_of_appointments FROM appointments
GROUP BY doctor_id, status
ORDER BY doctor_id ASC;

-- Q8. Retrieve the medical records for a specific patient.
SELECT * FROM medical_records
WHERE patient_id = 10667;  -- Replace 18 with desired patient_id

-- Q9. Calculate the total revenue generated by each doctor.
SELECT d.name, b.doctor_id, SUM(b.amount_charged) AS Total_revenue
FROM billing b
INNER JOIN doctors d
ON b.doctor_id = d.doctor_id
GROUP BY d.name, b.doctor_id
ORDER BY doctor_id;

-- Q10. Identify patients who have more than three appointments scheduled.
SELECT patient_id, COUNT(appointment_id) AS appointment_count
FROM appointments
GROUP BY patient_id
HAVING COUNT(appointment_id) > 3;

SELECT * FROM appointments

-- Advanced Level

-- Q11. Find patients diagnosed with a specific condition (e.g., "Diabetes").
SELECT p.patient_id, p.name, m.diagnosis FROM patients p
INNER JOIN medical_records m
ON p.patient_id = m.patient_id
WHERE diagnosis = 'Diabetes' -- Replace 'Diabetes' with desired diagnosis

-- Q12. Display appointment details along with billing status for all patients.
SELECT a.*, b.* FROM appointments a
INNER JOIN billing b
ON a.patient_id = b.patient_id
ORDER BY b.patient_id;

-- Q13. Generate a report of patients with pending payments and their last appointment date.
SELECT p.*, b.payment_status, a.appointment_date FROM patients p
INNER JOIN billing b
ON p.patient_id =b.patient_id
INNER JOIN appointments a
ON p.patient_id = a.patient_id
WHERE b.payment_status = 'Unpaid'
ORDER BY p.patient_id;

-- Q14. Find doctors who have no appointments in the last 30 days.
SELECT d.doctor_id, d.name FROM doctors d
INNER JOIN appointments a
ON d.doctor_id = a.doctor_id
WHERE a.appointment_date >= CURRENT_DATE - INTERVAL '30 days';

-- Q15. Determine the average amount charged for each service type.
SELECT service_type, AVG(amount_charged) AS average_amount
FROM billing
GROUP BY service_type;

-- Q16. Identify the top 3 doctors with the highest number of medical records.
SELECT d.*, COUNT(m.record_id) As no_of_medical_records 
FROM doctors d
INNER JOIN medical_records m
ON d.doctor_id = m.doctor_id
GROUP BY d.doctor_id
ORDER BY no_of_medical_records DESC
LIMIT 3;

-- Q17. Find the most common diagnosis made by each doctor.

WITH DiagnosisCounts AS (SELECT doctor_id, diagnosis, COUNT(record_id) AS Count,
           ROW_NUMBER() OVER (PARTITION BY doctor_id ORDER BY COUNT(record_id) DESC) AS Rank
    FROM medical_records GROUP BY doctor_id, diagnosis
)
SELECT doctor_id, diagnosis, Count FROM DiagnosisCounts
WHERE Rank = 1;

-- Q18. List all services provided by a specific doctor, along with the total amount charged.

SELECT
    d.name AS DoctorName,
    b.service_type,
    SUM(b.amount_charged) AS TotalAmountCharged
FROM
    doctors d
INNER JOIN appointments a ON d.doctor_id = a.doctor_id
INNER JOIN billing b ON a.doctor_id = b.doctor_id 
WHERE
    d.doctor_id = 8  -- Replace 'specific_doctor_id' with the actual ID
GROUP BY
    d.name, b.service_type;
	
-- Scenario-Based Questions

-- Q1. Generate a detailed report showing: Patient name, Doctor's specialization, Diagnosis, 
-- Treatment plan, Payment status.

SELECT p.name, d.specialization, mr.diagnosis, mr.treatment_plan, b.payment_status
FROM patients p
INNER JOIN 
    medical_records mr ON p.patient_id = mr.patient_id
INNER JOIN 
    doctors d ON mr.doctor_id = d.doctor_id
INNER JOIN 
    billing b ON p.patient_id = b.patient_id AND mr.doctor_id = b.doctor_id;

-- Q2. Analyze the revenue contribution of each service type.

SELECT 
    b.service_type,
    SUM(b.amount_charged) AS total_revenue,
    ROUND(CAST(SUM(b.amount_charged) * 100.0 / (SELECT SUM(amount_charged) FROM billing) AS NUMERIC), 2) AS percentage_contribution
FROM 
    billing b
GROUP BY 
    b.service_type;

-- Q3. Identify the youngest and oldest patients who have active medical records.

SELECT patient_id, name AS patient_name, dob
FROM patients
WHERE dob = (SELECT MIN(dob) FROM patients)
UNION ALL
SELECT patient_id, name AS patient_name, dob
FROM patients
WHERE dob = (SELECT MAX(dob) FROM patients);

-- Q4. Find the total number of appointments made in the last month.

SELECT
    COUNT(*) AS total_appointments
FROM
    appointments
WHERE
    appointment_date BETWEEN DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' 
    AND CURRENT_DATE - INTERVAL '1 day';

